.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba($color-black, 0.1);
  // NOTE: We use rgba here to give the background color some transparency.
  background-color: rgba($color-white, .6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: $default-font-size;
  // 1 - The transform property is used to skew the element to the left.
  // 2 - We then use the & > * selector to select all the direct children of the .story class and skew them back to the right.
  // 3 - However we can't use more than 1 transform on the same element, so we have to select individual children and apply the skew to them,
  // both to shape and to text manually.
  transform: skewX(-12deg);

  &__shape {
    width: 15rem;
    height: 15rem;
    float: left;
    -webkit-shape-outside: circle(50% at 50% 50%);

    // Shape outside property is used to define how the text should float around the element,
    // Clip-path property create the actual circle shape.

    // Here we use circle() function to create a circle shape.
    // 50% is the radius of the circle, so in this case half of the height and half of the width of the element.
    // 50% 50% is the position of the circle, so in this case the center of the element.
    // IMPORTANT: In order to work, the element must be floated, so the text can wrap around it and defined dimensions (width and height).
    // The -webkit- prefix is used for Safari, as it doesn't support the shape-outside property without it.
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);

    // The translate property is used to move the element to the left, so the text can wrap around it.
    transform: translate(-3rem) skewX(12deg);
    position: relative;
  }

  &__img {
    // We have to give the image a height of 100% to make it fill the entire shape.

    // 1 - The transform property is used to scale the image up and move it to the left (center it).
    // 2 - We add transition here to make the animation smooth.
    // 3 - When hovering, we scale the image back to 1.
    height: 100%;
    transform: translateX(-4rem) scale(1.4);
    backface-visibility: hidden;
    transition: all 0.5s;
  }

  &__text {
    transform: skewX(12deg);
  }

  &__caption {
  // We use position absolute here and relative on the shape.
  // This is the initial position before hovering.
  // Make sure to use the same translate in both the initial and hover state (i.e. not translate and translateY).
  // Backface visibility is used to prevent the text from flipping at the end of the animation when the element is hovered.
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, 20%);
  color: $color-white;
  text-transform: uppercase;
  font-size: 1.7rem;
  text-align: center;
  opacity: 0;
  transition: all 0.5s;
  backface-visibility: hidden;
  }

  &:hover &__caption {
    opacity: 1;
    transform: translate(-50%, -50%);
  }

  &:hover &__img {
    // 1 - The transform property is used to scale the image back to 1.
    // 2 - We then use the filter property to make the image blurred and darker.
    transform: translateX(-4rem) scale(1);
    filter: blur(3px) brightness(80%);
  }
}
