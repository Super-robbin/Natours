/* 
Display: inline-block is treated as it was a text.
Transition: all 0.2s - this will create a smooth transition effect for all properties that change (i.e. transform: translate below).
IMPORTANT: The transition property must be in the default state of the element, not in the hover state, otherwise, it won't work.
*/

.btn {
    &:link,
    &:visited {
      text-transform: uppercase;
      text-decoration: none;
      padding: 1.5rem 4rem;
      display: inline-block;
      border-radius: 10rem;
      transition: all 0.2s;
      position: relative;
      font-size: $default-font-size;
    }
  
    /* 
    Transform: translateY(-3px); to create a hover effect where the button will move up by 3px when hovered.
    Transform: translateY(-1px); to create a click effect where the button will move up by 1px when clicked.
    IMPORTANT: -1px is relative to the original position of the element, not the position after the hover effect.
    */
    &:hover {
      transform: translateY(-3px);
      box-shadow: 0 1rem 2rem rgba($color-black, 0.2);
  
      &::after {
        transform: scaleX(1.4) scaleY(1.6);
        opacity: 0;
      }
    }
  
    &:active {
      transform: translateY(-1px);
      box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
    }
  
    &--white {
      background-color: $color-white;
      color: $color-grey-dark;
  
      &::after {
        background-color: $color-white;
      }
    }

    &--green {
      background-color: $color-primary;
      color: $color-white;
  
      &::after {
        background-color: $color-primary;
      }
    }
  
    /* 
    ::after pseudo-element adds a virtual element right after the element that we're selecting (treated as a child of that element).
    The trick here is to add an element that looks exactly like the button that we already have,
    but we put it behind the button. When we hover out of the button, then this hidden pseudo-element amazingly goes back behind the button.
    1 - We have to specify its content, even if it's empty, otherwise it won't appear on the screen.
    2 - We have to specify its display property, in this case inline-block, because the button that we have is an inline-block element.
    3 - We have to specify its height and width, in this case 100% of the button.
    4 - We have to specify its border-radius, in this case 100% of the button.
    5 - We want the button to be white, so we have to select .btn-white::after and specify its background-color.
    6 - We have to specify its position, in this case absolute, so it will be positioned relative to the button (PUT position:relative in the button).
    7 - We have to specify its top and left, in this case 0, so it will be positioned at the top left corner of the button.
    8 - We have to specify its z-index, in this case -1, so it will be behind the button.
    9 - We want the button to grow when hovered, so we have to select .btn:hover::after and specify its transform for x and y.
    10 - We want the button to disappear when hovered, so we have to select .btn:hover::after and specify its opacity: 0.
    11 - We have to specify its transition, in this case all 0.4s, so it will have a smooth transition effect.
    12 - We have to create a class for the animation, in this case .btn-animated, and specify the animation properties there,
    in this case moveInBottom 0.5s ease-out 0.75s (delay for animation to start).
    13 - We also specify the animation-fill-mode: backwards, it automatically applies the styles up to zero percent before the animation starts.
    In our case it will apply the opacity: 0 and translateY(30px) before the animation starts.
    */
    &::after {
      content: "";
      display: inline-block;
      height: 100%;
      width: 100%;
      border-radius: 10rem;
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      transition: all 0.4s;
    }
  
    &--animated {
      animation: moveInBottom 0.5s ease-out 0.75s;
      animation-fill-mode: backwards;
    }
  }

  .btn-text {
    &:link,
    &:visited {
      font-size: $default-font-size;
      color: $color-primary;
      display: inline-block;
      text-decoration: none;
      border-bottom: 1px solid currentColor;
      padding: 3px;
      transition: all 0.2s;
    }
  
    &:hover {
      background-color: $color-primary;
      color: $color-white;
      box-shadow: 0 1rem 2rem rgba($color-black, .2);
      transform: translateY(-2px);
    }

    &:active {
      box-shadow: 0 .5rem 2rem rgba($color-black, .2);
      transform: translate(0);
    }
  }