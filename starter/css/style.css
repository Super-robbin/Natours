/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* CSS RESET - We reset with universal selector below */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

/* 
95vh - 95% of the  
background-position: top - whatever the viewport size, the image will always be at the top, and the rest of the image will be cropped.

background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ), - the gradient will come from the top left to the bottom right, and the colors will be light green to medium green. The 0.8 is the opacity of the gradient.
    The image will be displayed below (behind) the gradient.

clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%); - this will create a clip path that will cut the image in 4 specific points. 
The image will be displayed only in the area that is not cut by the clip path. Each of the 4 points is a coordinate (x, y) in the image. 
(0, 0) is the top left corner, (100%, 0) is the top right corner, (100%, 75vh) is the bottom right corner (we use vh so it adjusts dynamically when the page shrinks,
and (0, 100%) is the bottom left corner.
*/

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;

  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

/* 
left: 50% - this will move the text box to the center from the left side by 50% of the viewport width.

transform: translate(-50%, -50%); - Because these 50% are now no longer in relation to the parent element, but of the element itself.
We want -50%, it will be shifted half of the width to the left side.
Same for the height, -50% says that it will be shifted 50% of the element's height to the top.
*/
.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  /* 
  it determines whether the back part of the element, when we transform it, is visible or hidden for the user.
  */
}

/* 
To make them one above the other one, we use display: block, because block elements occupy the entire width they have available,
and they create line breaks before and after themselves.
*/
.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  
  
  /* 
  animation-delay: 3s;
  animation-iteration-count: 3;
  */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  animation: moveInRight 1s ease-out;
}

/* 
keyframes - we define the animation here. We give it a name, moveInLeft, and we define the properties that will change during the animation.
We start from 0% with opacity 0 and translateX -100px (move to the left by 100px), meaning invisible and off the screen.
We finish at 100% with opacity 1 and translateX 0 (move to the left by 0px), meaning visible and on the screen.
We also have a middle point at 80% where the element will move to the right by 10px.

IMPORTANT: The animation will not work until we apply it to an element in the CSS. 
So we need animation-name and animation-duration properties in the element that we want to animate.
Animation-delay is optional, it will delay the start of the animation.
Animation-iteration-count is optional, it will define how many times the animation will run.
Animation-timing-function is optional, it will define the speed curve of the animation. 
Ease-in is a slow start and fast finish. Ease-out is a fast start and slow finish.
Animation: moveInRight 1s ease-out; - this is a shorthand for all the animation properties.
*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}